# FOR TRADE

getwd()

Trade <- readxl::read_excel("country.xlsx")

#Filtering out the countries of interest
country_names <- c("Belize", "Congo", "Ecuador", "El Salvador")

Trade_Cleaned <- Trade %>%
  filter(tolower(CTYNAME) %in% tolower(country_names)) %>%
  # Select relevant columns for charts
  select(year, CTY_CODE, CTYNAME, IYR, EYR)

-------
  
  library(dplyr)
library(ggplot2)

# Filter data for 2000-2025 and aggregate totals by country
Trade_Summary <- Trade_Cleaned %>%
  filter(year >= 2000 & year <= 2025) %>%
  group_by(CTYNAME) %>%
  summarize(
    Total_Imports = sum(IYR, na.rm = TRUE),
    Total_Exports = sum(EYR, na.rm = TRUE)
  ) %>%
  tidyr::pivot_longer(
    cols = c(Total_Imports, Total_Exports),
    names_to = "Trade_Type",
    values_to = "Trade_Value"
  )

# Plot grouped bar chart
ggplot(Trade_Summary, aes(x = CTYNAME, y = Trade_Value, fill = Trade_Type)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  scale_fill_manual(values = c("Total_Imports" = "#1f77b4", "Total_Exports" = "#ff7f0e")) +
  labs(
    title = "Total Imports vs. Exports (2000-2025)",
    x = "Country",
    y = "Trade Value ($)",
    fill = "Trade Type"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

----------------------------
  library(dplyr)
library(ggplot2)
library(scales)  # For formatting numbers

# 1. Filter data (2000-2025) and aggregate
Trade_Summary <- Trade_Cleaned %>%
  filter(year >= 2000 & year <= 2025) %>%
  group_by(CTYNAME) %>%
  summarize(
    Total_Imports = sum(IYR, na.rm = TRUE),  # Values in millions
    Total_Exports = sum(EYR, na.rm = TRUE)
  ) %>%
  tidyr::pivot_longer(
    cols = c(Total_Imports, Total_Exports),
    names_to = "Trade_Type",
    values_to = "Trade_Value_Millions"  # Rename for clarity
  ) %>%
  mutate(
    # Convert millions to billions for labels
    Trade_Value_Billions = Trade_Value_Millions / 1000,
    # Format labels dynamically (e.g., "1.3B")
    Label = ifelse(
      Trade_Value_Millions >= 1000,
      paste0(round(Trade_Value_Billions, 1), "B"),
      paste0(round(Trade_Value_Millions, 1), "M")
    ),
    # Fix country names
    CTYNAME = case_when(
      tolower(CTYNAME) == "bankize" ~ "Belize",
      tolower(CTYNAME) == "compo" ~ "Congo",
      TRUE ~ CTYNAME
    ),
    # Simplify legend
    Trade_Type = ifelse(
      Trade_Type == "Total_Imports", "Imports", "Exports"
    )
  )

# 2. Plot
ggplot(Trade_Summary, aes(x = CTYNAME, y = Trade_Value_Billions, fill = Trade_Type)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(
    aes(label = Label),
    position = position_dodge(width = 0.8),
    vjust = -0.5,
    size = 3.5,
    fontface = "bold"
  ) +
  scale_fill_manual(values = c("Imports" = "#1f77b4", "Exports" = "#ff7f0e")) +
  scale_y_continuous(
    labels = scales::label_number(suffix = "B"),
    expand = expansion(mult = c(0, 0.1))
  ) +
  labs(
    title = "Total Imports vs. Exports (2000–2025)",
    x = "",
    y = "Trade Value (Billions USD)",
    fill = "Trade Type"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    legend.position = "right"
  )

-------------------------------------

#Trade trend Facet

  # Load required packages
  library(dplyr)
library(tidyr)
library(ggplot2)

# Assuming your uploaded data is in a data frame named 'Trade_Cleaned'

# Define selected countries
country_names <- c("Belize", "Gabon", "Ecuador", "El Salvador")

# Filter and prepare data, converting year to numeric
plot_data <- Trade_Cleaned %>%
  mutate(year = as.numeric(year)) %>%  # Convert year to numeric
  filter(CTYNAME %in% country_names & year >= 2000 & year <= 2024) %>%
  select(CTYNAME, year, IYR, EYR) %>%
  pivot_longer(cols = c(IYR, EYR), names_to = "Trade_Type", values_to = "Value") %>%
  mutate(
    Value = Value / 1000,  # Convert millions to billions
    Trade_Type = recode(Trade_Type, "IYR" = "Imports", "EYR" = "Exports")
  )

# Define Y-axis limits for each country
limits_data <- data.frame(
  CTYNAME = c("Belize", "Gabon", "Ecuador", "El Salvador"),
  ymin = c(0, 0, 0, 0),
  ymax = c(1, 1, 1, 1)
)

# Create faceted line plot with points
p <- ggplot(plot_data, aes(x = year, y = Value, color = Trade_Type)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  facet_wrap(~ CTYNAME, scales = "free_y", nrow = 2, ncol = 2) +
  scale_x_continuous(breaks = seq(2000, 2024, by = 5)) +
  scale_color_manual(values = c("Imports" = "#FF6384", "Exports" = "#36A2EB")) +
  labs(
    title = "US Trade Trends with Countries, 2000–2024",
    x = "Year",
    y = "Value ($ Billion)",
    color = "Trade Type"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10),
    strip.text = element_text(size = 12, face = "bold"),
    legend.position = "top"
  )

# Apply custom Y-axis limits per facet, avoiding color aesthetic in geom_blank
p <- p +
  geom_blank(data = limits_data, aes(y = ymin), inherit.aes = FALSE) +
  geom_blank(data = limits_data, aes(y = ymax), inherit.aes = FALSE) +
  coord_cartesian(ylim = c(0, NA)) +
  scale_y_continuous(breaks = function(x) {
    if (max(x) <= 10) seq(0, 10, by = 2)  # Belize
    else if (max(x) <= 40) seq(0, 40, by = 10)  # Gabon
    else if (max(x) <= 80) seq(0, 80, by = 20)  # El Salvador
    else seq(0, 200, by = 50)  # Ecuador
  })

# Display the plot
p

# Save chart as high-resolution PNG for Word
ggsave("trade_trends_actual.png", plot = p, width = 6, height = 6, dpi = 300, units = "in")
----------------------------------------------------------------------------------------
#For imports 2024 but includes the cleaning process etc.
getwd()
sheet1 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Export.xlsx", sheet = "Central")
sheet2 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Export.xlsx", sheet = "South")
sheet3 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Export.xlsx", sheet = "Sub")
export_datasheet <- bind_rows(sheet1, sheet2, sheet3)

sheet4 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Imports.xlsx", sheet = "Central")
sheet5 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Imports.xlsx", sheet = "South")
sheet6 <- read_excel("/Users/trumu/Desktop/TNC/Plat/Imports.xlsx", sheet = "Sub")
imports_datasheet <- bind_rows(sheet4, sheet5, sheet6)

----------------------------------------------------------------------------
# Load packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)


# Define the six named products
named_products <- c(
  "111--Agricultural Products",
  "112--Livestock & Livestock Products",
  "113--Forestry Products",
  "114--Fish & Other Marine Products",
  "321--Wood Products",
  "322--Paper",
  "Other"
)

# Function to process each dataset (exports or imports)
process_data <- function(data, flow_type) {
  # Filter for named products
  named_data <- data %>%
    filter(Product %in% named_products) %>%
    mutate(Product = factor(Product, levels = named_products))
  
  # Aggregate all other products into the "Other" category
  other_data <- data %>%
    filter(!Product %in% named_products, Product != "0–All Merchandise") %>%
    group_by(Country, Flow, `Product Classification`, Unit) %>%
    summarise(across(all_of("2024"), sum, na.rm = TRUE), .groups = "drop") %>%
    mutate(Product = "Other")
  
  # Combine named and "Other"
  combined_data <- bind_rows(named_data, other_data)
  
  # Keep only 2024 data, reshape to long format
  long_data <- combined_data %>%
    pivot_longer(cols = "2024", 
                 names_to = "Year", 
                 values_to = "Value") %>%
    mutate(Flow = flow_type, Year = 2024) %>%
    select(Product, Flow, Country, Year, Value)
  
  return(long_data)
}

# Process the datasets
export_long <- process_data(export_datasheet, "Exports")
import_long <- process_data(imports_datasheet, "Imports")

# Combine both into one dataset (optional)
all_data <- bind_rows(export_long, import_long)


#Breaking it down into the various regions and ordering it by year.
Central <- all_data %>%
  filter(Country == "Central America") %>%
  group_by(Year, Flow, Product) %>%
  summarize(Value = sum(Value), .groups = "drop")

Central <- Central %>%
  group_by(Year, Flow) %>%
  mutate(Total_Value = sum(Value, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(Percentage = (Value / Total_Value) * 100) %>%
  select(Year, Flow, Product, Value, Percentage) %>%
  arrange(Year, Flow, Product) %>%
  # Round Percentage to 2 decimal places for readability
  mutate(Percentage = round(Percentage, 2))

South <- all_data %>%
  filter(Country == "South America") %>%
  group_by(Year, Flow, Product) %>%
  summarize(Value = sum(Value), .groups = "drop")

Sub <- all_data %>%
  filter(Country == "Sub-Saharan Africa") %>%
  group_by(Year, Flow, Product) %>%
  summarize(Value = sum(Value), .groups = "drop")
----------------------------------------------
#Still on imports 2024
library(ggplot2)
library(dplyr)

# Filter import data for 2024 and exclude "Other"
plot_data <- import_long %>%
  filter(Year == 2024, Product != "Other")

# Optional: reorder products for consistent coloring/order
plot_data$Product <- factor(plot_data$Product, levels = named_products[-length(named_products)]) 
# Exclude "Other" from named_products in levels

library(ggplot2)
library(dplyr)

# Filter import data for 2024 and exclude "Other"
plot_data <- import_long %>%
  filter(Year == 2024, Product != "Other")

# Set product factor levels to ensure order and matching colors
product_levels <- c(
  "111--Agricultural Products",
  "112--Livestock & Livestock Products",
  "113--Forestry Products",
  "114--Fish & Other Marine Products",
  "321--Wood Products",
  "322--Paper"
)

plot_data$Product <- factor(plot_data$Product, levels = product_levels)

# Define your custom color palette
custom_colors <- c(
  "111--Agricultural Products" = "#49A842",  # Green
  "112--Livestock & Livestock Products" = "#3498DB", # Blue
  "113--Forestry Products" = "#00291F",  # Dark green
  "114--Fish & Other Marine Products" = "#85C1E9", # Light blue
  "321--Wood Products" = "#8B4513", # Brown
  "322--Paper" = "#9B59B6"  # Purple
)

# Plot with custom colors
  ggplot(plot_data, aes(x = Country, y = Value, fill = Product)) +
  geom_bar(
    stat = "identity",
    position = "stack",
    width = 0.7,
    color = "white",
    linewidth = 0.3
  ) +
  scale_fill_manual(values = custom_colors) +
  labs(
    title = "Imports by Product Category (2024)",
    x = "",
    y = "Import Value ($)"
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 6),
    labels = function(x) paste0(scales::comma(x / 1000), "B"),
    expand = c(0, 0)
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )
